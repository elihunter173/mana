pub trait Iterator {
    type Item
    fn next(&uniq self) Option[Self.Item]
}

// TODO: How do I want to extend traits in a way that the implementor can't
// override?
fn[T Iterator] for_each(&self T, f fn(T.Item)) {
    loop {
        match self.next() {
            Some(x) => f(x),
            None => return,
        }
    }
}

pub fn repeat(n UInt, f fn()) {
    (0..n).for_each() {
        f()
    }
}
